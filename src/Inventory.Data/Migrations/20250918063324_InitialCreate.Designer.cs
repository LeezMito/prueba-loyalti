// <auto-generated />
using System;
using Inventory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inventory.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250918063324_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Entities.Models.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("Articulos", t =>
                        {
                            t.HasCheckConstraint("CK_Articulos_Precio", "[Precio] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "A1001",
                            Descripcion = "Camiseta básica blanca",
                            ImagenUrl = "https://picsum.photos/seed/a1001/600/400",
                            Precio = 199.99m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "A1002",
                            Descripcion = "Pantalón de mezclilla",
                            ImagenUrl = "https://picsum.photos/seed/a1002/600/400",
                            Precio = 499.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "A1003",
                            Descripcion = "Tenis deportivos",
                            ImagenUrl = "https://picsum.photos/seed/a1003/600/400",
                            Precio = 899.00m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "A1004",
                            Descripcion = "Sudadera con capucha",
                            ImagenUrl = "https://picsum.photos/seed/a1004/600/400",
                            Precio = 650.00m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "A1005",
                            Descripcion = "Reloj casual",
                            ImagenUrl = "https://picsum.photos/seed/a1005/600/400",
                            Precio = 1200.00m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 6,
                            Codigo = "A1006",
                            Descripcion = "Mochila escolar",
                            ImagenUrl = "https://picsum.photos/seed/a1006/600/400",
                            Precio = 350.00m,
                            Stock = 60
                        },
                        new
                        {
                            Id = 7,
                            Codigo = "A1007",
                            Descripcion = "Gorra clásica",
                            ImagenUrl = "https://picsum.photos/seed/a1007/600/400",
                            Precio = 150.00m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 8,
                            Codigo = "A1008",
                            Descripcion = "Cinturón de piel",
                            ImagenUrl = "https://picsum.photos/seed/a1008/600/400",
                            Precio = 275.00m,
                            Stock = 35
                        });
                });

            modelBuilder.Entity("Inventory.Entities.Models.ArticuloTienda", b =>
                {
                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int>("TiendaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAlta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ArticuloId", "TiendaId");

                    b.HasIndex("TiendaId");

                    b.ToTable("ArticuloTiendas");

                    b.HasData(
                        new
                        {
                            ArticuloId = 1,
                            TiendaId = 1,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ArticuloId = 2,
                            TiendaId = 1,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ArticuloId = 3,
                            TiendaId = 1,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ArticuloId = 4,
                            TiendaId = 1,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ArticuloId = 5,
                            TiendaId = 2,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ArticuloId = 6,
                            TiendaId = 2,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ArticuloId = 7,
                            TiendaId = 2,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ArticuloId = 8,
                            TiendaId = 2,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ArticuloId = 1,
                            TiendaId = 2,
                            FechaAlta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Inventory.Entities.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Apellidos", "Nombre");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Inventory.Entities.Models.ClienteArticulo", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("ClienteId", "ArticuloId", "Fecha");

                    b.HasIndex("ArticuloId");

                    b.ToTable("ClienteArticulos");
                });

            modelBuilder.Entity("Inventory.Entities.Models.Tienda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sucursal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Sucursal")
                        .IsUnique();

                    b.ToTable("Tiendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Av. Principal #123, CDMX",
                            Sucursal = "Tienda Centro"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Calle Secundaria #45, CDMX",
                            Sucursal = "Tienda Norte"
                        });
                });

            modelBuilder.Entity("Inventory.Entities.Models.ArticuloTienda", b =>
                {
                    b.HasOne("Inventory.Entities.Models.Articulo", "Articulo")
                        .WithMany("ArticuloTiendas")
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Entities.Models.Tienda", "Tienda")
                        .WithMany("ArticuloTiendas")
                        .HasForeignKey("TiendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Tienda");
                });

            modelBuilder.Entity("Inventory.Entities.Models.ClienteArticulo", b =>
                {
                    b.HasOne("Inventory.Entities.Models.Articulo", "Articulo")
                        .WithMany("ClienteArticulos")
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inventory.Entities.Models.Cliente", "Cliente")
                        .WithMany("ClienteArticulos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Inventory.Entities.Models.Articulo", b =>
                {
                    b.Navigation("ArticuloTiendas");

                    b.Navigation("ClienteArticulos");
                });

            modelBuilder.Entity("Inventory.Entities.Models.Cliente", b =>
                {
                    b.Navigation("ClienteArticulos");
                });

            modelBuilder.Entity("Inventory.Entities.Models.Tienda", b =>
                {
                    b.Navigation("ArticuloTiendas");
                });
#pragma warning restore 612, 618
        }
    }
}
